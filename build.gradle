plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.3.0'
    id 'org.jlleitschuh.gradle.ktlint' version '11.6.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
    testImplementation 'io.kotest:kotest-assertions-core:5.8.0'
    testImplementation 'io.kotest:kotest-framework-engine:5.8.0'
    testImplementation 'io.mockk:mockk:1.13.5'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll('-Xjsr305=strict')
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def generatedOutput = "$buildDir/generated/src/main/kotlin"
def generatedOutputDir = file(generatedOutput)

task generateWebModels(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    inputSpec = "$rootDir/spec/web.yaml"
    outputDir = generatedOutput
    modelPackage = "com.example.demo.web.model"

    // üëá required for Gradle 8+ task validation
    inputs.file(inputSpec)
    outputs.dir(generatedOutputDir)

    globalProperties = [
            models: "",
            supportingFiles: "false",
            apis: "false"
    ]
    configOptions = [
            sourceFolder: "",
            serializationLibrary: "jackson",
            modelNameSuffix: "Web"
    ]
}

task generateDomainModels(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    inputSpec = "$rootDir/spec/domain.yaml"
    outputDir = generatedOutput
    modelPackage = "com.example.demo.domain.model"

    inputs.file(inputSpec)
    outputs.dir(generatedOutputDir)

    globalProperties = [
            models: "",
            supportingFiles: "false",
            apis: "false"
    ]
    configOptions = [
            sourceFolder: "",
            serializationLibrary: "jackson",
            modelNameSuffix: "Domain"
    ]
}

task generateRepositoryModels(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    inputSpec = "$rootDir/spec/repository.yaml"
    outputDir = generatedOutput
    modelPackage = "com.example.demo.repository.dto"

    inputs.file(inputSpec)
    outputs.dir(generatedOutputDir)

    globalProperties = [
            models: "",
            supportingFiles: "false",
            apis: "false"
    ]
    configOptions = [
            sourceFolder: "",
            serializationLibrary: "jackson",
            modelNameSuffix: "DTO"
    ]
}

task generateAllModels {
    dependsOn generateWebModels, generateDomainModels, generateRepositoryModels
}

sourceSets {
    main {
        kotlin {
            srcDir generatedOutput
        }
    }
}

compileKotlin.dependsOn(generateAllModels)

// üíÖ Ktlint Configuration
ktlint {
    filter {
        exclude("**/build/generated/**")      // ‚úÖ Ignore generated files
        exclude("**/build/**")                // ‚õîÔ∏è Safe: ignores all build output
        include("**/src/main/kotlin/**")      // ‚úÖ Only include your main codebase
    }
}

tasks.named("ktlintMainSourceSetCheck") {
    dependsOn(generateAllModels)
    mustRunAfter(generateAllModels)
}


tasks.named("runKtlintCheckOverMainSourceSet") {
    dependsOn(generateAllModels)
    inputs.dir(file(generatedOutput)).withPathSensitivity(PathSensitivity.RELATIVE)
}
